import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java'
}

repositories {
    mavenLocal()
    mavenCentral()

    maven {
        url 'https://repo.not-null.co.uk/snapshots/'
    }

    maven {
        url 'https://papermc.io/repo/repository/maven-public/'
    }

    maven {
        url 'https://maven.enginehub.org/repo/'
    }

    maven {
        url 'https://jitpack.io'
    }
}

dependencies {
    compileOnly 'io.papermc.paper:paper-api:1.21.1-R0.1-SNAPSHOT'
    compileOnly 'com.sk89q.worldguard:worldguard-bukkit:7.0.9'
    implementation(platform("com.intellectualsites.bom:bom-1.18.x:1.28"))
    compileOnly("com.plotsquared:PlotSquared-Core")
    compileOnly("com.plotsquared:PlotSquared-Bukkit")
    compileOnly 'com.github.TechFortress:GriefPrevention:16.18'
    compileOnly 'com.github.Gecolay.GSit:core:1.9.5'
    compileOnly 'org.hurricanegames:CreativeItemFilter:3.0-SNAPSHOT' //Local maven
    compileOnly 'uk.co.notnull:CustomItemsAPI:1.0-SNAPSHOT'
    implementation 'com.github.BeYkeRYkt:LightAPI:5.3.0-Bukkit'
    implementation messagesHelperDependency
}

group = 'uk.co.notnull'
version = '1.1-SNAPSHOT'

java.sourceCompatibility = JavaVersion.VERSION_21
java.targetCompatibility = JavaVersion.VERSION_21

task processSource(type: Sync) {
    from sourceSets.main.java
    filter(ReplaceTokens, tokens: [('messagesHelperDependency'): messagesHelperDependency])
    into "${layout.buildDirectory.get()}/src"
}

tasks {
    processResources {
        from("${project.rootDir}/src/main/resources") {
            duplicatesStrategy = DuplicatesStrategy.INCLUDE
            project.properties.findAll().each {
                prop ->
                    if (prop.value != null && prop.value instanceof java.lang.String) {
                        filter(ReplaceTokens, tokens: [(prop.key): prop.value])
                        filter(ReplaceTokens, tokens: [('project.' + prop.key): prop.value])
                    }
            }
        }
    }

    compileJava {
        dependsOn(clean)
        source = processSource.outputs
        options.compilerArgs += ["-Xlint:all", "-Xlint:-processing"]
        options.encoding = 'utf-8'
    }
}
